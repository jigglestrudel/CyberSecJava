package org.example.signing;

import org.json.JSONObject;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.UserDefinedFileAttributeView;
import java.security.*;

public class SignatureGenerator {
    private final String path;
    private final String algorithm;
    private final String publicKeyFileName;
    private final String signatureFileName;
    private final String privateKeyFileName;
    private final String username;

    public SignatureGenerator(String path, String signatureFileName, String privateKeyFileName, String publicKeyFileName) throws IOException {
        JSONObject settings = readSettings("settings.json");
        this.path = path;
        this.algorithm = settings.getString("algorithm").trim();
        this.username = settings.getString("username").trim();
        this.signatureFileName = signatureFileName;
        this.privateKeyFileName = privateKeyFileName;
        this.publicKeyFileName = publicKeyFileName;
    }

    public String getHashFunction(String algorithm) {
        //algorytmy podpisu cyfrowego łączą funkcję skrótu z algorytmem podpisu.
        // Różne algorytmy podpisu wymagają różnych kombinacji funkcji skrótu i algorytmu podpisu
        return switch (algorithm) {
            case "DSA" -> "SHA1withDSA";
            case "RSA" -> "SHA256withRSA";
            default -> "error";
        };
    }

    public boolean generateSignature() {
        try {
            //A key pair is generated by using the KeyPairGenerator class.
            //The private key is needed for signing the data.
            //The public key will be used by the VerSig program for verifying the signature.
            KeyPairGenerator keyGenerated = KeyPairGenerator.getInstance(algorithm);

            //SecureRandom class provides a cryptographically strong random number generator
            SecureRandom random = SecureRandom.getInstance("SHA1PRNG", "SUN");
            keyGenerated.initialize(1024, random);

            //Generate the key pair and store the keys in PrivateKey and PublicKey objects.
            KeyPair keyPair = keyGenerated.generateKeyPair();
            PrivateKey privateKey = keyPair.getPrivate();
            PublicKey publicKey = keyPair.getPublic();

            //A digital signature is created using an instance of the Signature class
            String hashFunction = getHashFunction(algorithm);

            //Get a Signature object for generating signatures using algorithm
            Signature cipher = Signature.getInstance(hashFunction);
            cipher.initSign(privateKey);

            //read in the data a buffer at a time and supply it to the Signature object by update method
            FileInputStream file = new FileInputStream(path);
            BufferedInputStream inputStream = new BufferedInputStream(file);
            byte[] buffer = new byte[1024];
            int length;
            while ((length = inputStream.read(buffer)) >= 0) {
                cipher.update(buffer, 0, length);
            }
            inputStream.close();

            //generate the digital signature of that data
            byte[] signature = cipher.sign();

            //save the signature, public key and private key in files
            saveDataToFiles(signature, publicKey, privateKey);

            // Add the encryption algorithm name to the file's metadata
            addAlgorithmToMetadata(Paths.get(path), algorithm);

            // Add the username to the file's metadata
            addUsernameToMetadata(Paths.get(path), username);

            // Read and print the algorithm from metadata
            readAlgorithmFromMetadata(Paths.get(path));

            // Read and print the username from metadata
            readUsernameFromMetadata(Paths.get(path));

            return true;

        } catch (Exception e) {
            System.err.println("Exception occurred " + e);
            return false;
        }
    }

    private void saveDataToFiles(byte[] signature, PublicKey publicKey, PrivateKey privateKey) throws IOException {
        FileOutputStream fileSignature = new FileOutputStream(signatureFileName);
        fileSignature.write(signature);
        fileSignature.close();

        // save the public key in a file
        byte[] key = publicKey.getEncoded();
        FileOutputStream fileKey = new FileOutputStream(publicKeyFileName);
        fileKey.write(key);
        fileKey.close();

        if (privateKeyFileName != null && !privateKeyFileName.isEmpty()) {
            byte[] priv = privateKey.getEncoded();
            FileOutputStream privateFileKey = new FileOutputStream(privateKeyFileName);
            privateFileKey.write(priv);
            privateFileKey.close();
        }
    }

    private void addAlgorithmToMetadata(Path filePath, String algorithm) throws IOException {
        UserDefinedFileAttributeView view = Files.getFileAttributeView(filePath, UserDefinedFileAttributeView.class);
        view.write("user.algorithm", ByteBuffer.wrap(algorithm.getBytes(StandardCharsets.UTF_8)));
    }

    private void addUsernameToMetadata(Path filePath, String username) throws IOException {
        UserDefinedFileAttributeView view = Files.getFileAttributeView(filePath, UserDefinedFileAttributeView.class);
        view.write("user.username", ByteBuffer.wrap(username.getBytes(StandardCharsets.UTF_8)));
    }

    private void readAlgorithmFromMetadata(Path filePath) throws IOException {
        UserDefinedFileAttributeView view = Files.getFileAttributeView(filePath, UserDefinedFileAttributeView.class);
        ByteBuffer buffer = ByteBuffer.allocate(view.size("user.algorithm"));
        view.read("user.algorithm", buffer);
        buffer.flip();
        String algorithm = StandardCharsets.UTF_8.decode(buffer).toString();
        System.out.println("Algorithm used: " + algorithm);
    }

    private void readUsernameFromMetadata(Path filePath) throws IOException {
        UserDefinedFileAttributeView view = Files.getFileAttributeView(filePath, UserDefinedFileAttributeView.class);
        ByteBuffer buffer = ByteBuffer.allocate(view.size("user.username"));
        view.read("user.username", buffer);
        buffer.flip();
        String username = StandardCharsets.UTF_8.decode(buffer).toString();
        System.out.println("Username: " + username);
    }

    private JSONObject readSettings(String settingsFileName) throws IOException {
        Path settingsPath = Paths.get(settingsFileName);
        String content = Files.readString(settingsPath);
        return new JSONObject(content);
    }
}